

	///<autogenerated>
	///Test unitarios Autogenerados. Cualquier modificación será reemplaza cuando se regeneren las pruebas.
	///</autogenerated>
	using System;
	using Microsoft.VisualStudio.TestTools.UnitTesting;
	using System.Net;
	using System.IO;
	using System.Text;
	using System.Linq;
	using System.Collections.Generic;
	using System.Configuration;
	using Newtonsoft.Json;
	namespace TEMPLATE.UnitTest
	{
		public class TestResult
		{
			public String ResultType {get; set;}
			public String TestName {get; set;}
			public String Description {get; set;}
		}

		[TestClass]
		public class TestRunner
		{
			private  String BASE_URL = ConfigurationManager.AppSettings["UnitTestAsp.UrlWebProject"] + @"/GildedRose.ASP.WebUI.UnitTest/TestEngine/TestASPUnitJSON.asp?UnitRunner=results";

				[TestMethod]
	[TestCategory("Dado_Un_Item_AgedBrie_Cuando_Se_Actualiza_Tests")]
	public void Dado_Un_Item_AgedBrie_Cuando_Se_Actualiza_Tests_Entonces_Calidad_Item_Mas_1Test()
	{
		StringBuilder urlAspUnitTest = new StringBuilder(); 
		urlAspUnitTest.Append(BASE_URL);
		urlAspUnitTest.Append("&cboTestContainers=");
		urlAspUnitTest.Append("Dado_Un_Item_AgedBrie_Cuando_Se_Actualiza_Tests");            
		urlAspUnitTest.Append("&cboTestCases=");
		urlAspUnitTest.Append("Entonces_Calidad_Item_Mas_1");
		urlAspUnitTest.Append("&chkShowSuccess=on");
		urlAspUnitTest.Append("&cmdRun=Run%20Tests");


		WebRequest request = WebRequest.Create(urlAspUnitTest.ToString());

		ICredentials requestCredentials = CredentialCache.DefaultCredentials;
		request.Credentials = requestCredentials;

		using (WebResponse response = request.GetResponse())
		{
			using (StreamReader stream = new StreamReader(response.GetResponseStream()))
			{
				string json = stream.ReadToEnd();

				List<TestResult> results = JsonConvert.DeserializeObject<List<TestResult>>(json);;

				foreach (TestResult result in results)
				{
					Assert.IsTrue(result.ResultType == "Success", result.Description);
				}
				//Assert.IsFalse(html.Contains("Failure"));
				//Assert.IsFalse(html.Contains("Error"));
			}
		}

	}

	[TestMethod]
	[TestCategory("Dado_Un_Item_AgedBrie_Cuando_Se_Actualiza_Tests")]
	public void Dado_Un_Item_AgedBrie_Cuando_Se_Actualiza_Tests_Entonces_Calidad_Nunca_Mayor_50Test()
	{
		StringBuilder urlAspUnitTest = new StringBuilder(); 
		urlAspUnitTest.Append(BASE_URL);
		urlAspUnitTest.Append("&cboTestContainers=");
		urlAspUnitTest.Append("Dado_Un_Item_AgedBrie_Cuando_Se_Actualiza_Tests");            
		urlAspUnitTest.Append("&cboTestCases=");
		urlAspUnitTest.Append("Entonces_Calidad_Nunca_Mayor_50");
		urlAspUnitTest.Append("&chkShowSuccess=on");
		urlAspUnitTest.Append("&cmdRun=Run%20Tests");


		WebRequest request = WebRequest.Create(urlAspUnitTest.ToString());

		ICredentials requestCredentials = CredentialCache.DefaultCredentials;
		request.Credentials = requestCredentials;

		using (WebResponse response = request.GetResponse())
		{
			using (StreamReader stream = new StreamReader(response.GetResponseStream()))
			{
				string json = stream.ReadToEnd();

				List<TestResult> results = JsonConvert.DeserializeObject<List<TestResult>>(json);;

				foreach (TestResult result in results)
				{
					Assert.IsTrue(result.ResultType == "Success", result.Description);
				}
				//Assert.IsFalse(html.Contains("Failure"));
				//Assert.IsFalse(html.Contains("Error"));
			}
		}

	}

	[TestMethod]
	[TestCategory("Dado_Un_Item_Standard_Cuando_Se_Actualiza_Tests")]
	public void Dado_Un_Item_Standard_Cuando_Se_Actualiza_Tests_Entonces_Calidad_Item_Menos_1Test()
	{
		StringBuilder urlAspUnitTest = new StringBuilder(); 
		urlAspUnitTest.Append(BASE_URL);
		urlAspUnitTest.Append("&cboTestContainers=");
		urlAspUnitTest.Append("Dado_Un_Item_Standard_Cuando_Se_Actualiza_Tests");            
		urlAspUnitTest.Append("&cboTestCases=");
		urlAspUnitTest.Append("Entonces_Calidad_Item_Menos_1");
		urlAspUnitTest.Append("&chkShowSuccess=on");
		urlAspUnitTest.Append("&cmdRun=Run%20Tests");


		WebRequest request = WebRequest.Create(urlAspUnitTest.ToString());

		ICredentials requestCredentials = CredentialCache.DefaultCredentials;
		request.Credentials = requestCredentials;

		using (WebResponse response = request.GetResponse())
		{
			using (StreamReader stream = new StreamReader(response.GetResponseStream()))
			{
				string json = stream.ReadToEnd();

				List<TestResult> results = JsonConvert.DeserializeObject<List<TestResult>>(json);;

				foreach (TestResult result in results)
				{
					Assert.IsTrue(result.ResultType == "Success", result.Description);
				}
				//Assert.IsFalse(html.Contains("Failure"));
				//Assert.IsFalse(html.Contains("Error"));
			}
		}

	}

	[TestMethod]
	[TestCategory("Dado_Un_Item_Standard_Cuando_Se_Actualiza_Tests")]
	public void Dado_Un_Item_Standard_Cuando_Se_Actualiza_Tests_Y_Pasada_Fecha_Venta_Entonces_Calidad_Item_Menos_2Test()
	{
		StringBuilder urlAspUnitTest = new StringBuilder(); 
		urlAspUnitTest.Append(BASE_URL);
		urlAspUnitTest.Append("&cboTestContainers=");
		urlAspUnitTest.Append("Dado_Un_Item_Standard_Cuando_Se_Actualiza_Tests");            
		urlAspUnitTest.Append("&cboTestCases=");
		urlAspUnitTest.Append("Y_Pasada_Fecha_Venta_Entonces_Calidad_Item_Menos_2");
		urlAspUnitTest.Append("&chkShowSuccess=on");
		urlAspUnitTest.Append("&cmdRun=Run%20Tests");


		WebRequest request = WebRequest.Create(urlAspUnitTest.ToString());

		ICredentials requestCredentials = CredentialCache.DefaultCredentials;
		request.Credentials = requestCredentials;

		using (WebResponse response = request.GetResponse())
		{
			using (StreamReader stream = new StreamReader(response.GetResponseStream()))
			{
				string json = stream.ReadToEnd();

				List<TestResult> results = JsonConvert.DeserializeObject<List<TestResult>>(json);;

				foreach (TestResult result in results)
				{
					Assert.IsTrue(result.ResultType == "Success", result.Description);
				}
				//Assert.IsFalse(html.Contains("Failure"));
				//Assert.IsFalse(html.Contains("Error"));
			}
		}

	}

	[TestMethod]
	[TestCategory("Dado_Un_Item_Standard_Cuando_Se_Actualiza_Tests")]
	public void Dado_Un_Item_Standard_Cuando_Se_Actualiza_Tests_Entonces_Calidad_Nunca_Menor_CeroTest()
	{
		StringBuilder urlAspUnitTest = new StringBuilder(); 
		urlAspUnitTest.Append(BASE_URL);
		urlAspUnitTest.Append("&cboTestContainers=");
		urlAspUnitTest.Append("Dado_Un_Item_Standard_Cuando_Se_Actualiza_Tests");            
		urlAspUnitTest.Append("&cboTestCases=");
		urlAspUnitTest.Append("Entonces_Calidad_Nunca_Menor_Cero");
		urlAspUnitTest.Append("&chkShowSuccess=on");
		urlAspUnitTest.Append("&cmdRun=Run%20Tests");


		WebRequest request = WebRequest.Create(urlAspUnitTest.ToString());

		ICredentials requestCredentials = CredentialCache.DefaultCredentials;
		request.Credentials = requestCredentials;

		using (WebResponse response = request.GetResponse())
		{
			using (StreamReader stream = new StreamReader(response.GetResponseStream()))
			{
				string json = stream.ReadToEnd();

				List<TestResult> results = JsonConvert.DeserializeObject<List<TestResult>>(json);;

				foreach (TestResult result in results)
				{
					Assert.IsTrue(result.ResultType == "Success", result.Description);
				}
				//Assert.IsFalse(html.Contains("Failure"));
				//Assert.IsFalse(html.Contains("Error"));
			}
		}

	}

	[TestMethod]
	[TestCategory("Dado_Un_Item_Sulfuras_Cuando_Se_Actualiza_Tests")]
	public void Dado_Un_Item_Sulfuras_Cuando_Se_Actualiza_Tests_Entonces_Calidad_Nunca_DisminuyeTest()
	{
		StringBuilder urlAspUnitTest = new StringBuilder(); 
		urlAspUnitTest.Append(BASE_URL);
		urlAspUnitTest.Append("&cboTestContainers=");
		urlAspUnitTest.Append("Dado_Un_Item_Sulfuras_Cuando_Se_Actualiza_Tests");            
		urlAspUnitTest.Append("&cboTestCases=");
		urlAspUnitTest.Append("Entonces_Calidad_Nunca_Disminuye");
		urlAspUnitTest.Append("&chkShowSuccess=on");
		urlAspUnitTest.Append("&cmdRun=Run%20Tests");


		WebRequest request = WebRequest.Create(urlAspUnitTest.ToString());

		ICredentials requestCredentials = CredentialCache.DefaultCredentials;
		request.Credentials = requestCredentials;

		using (WebResponse response = request.GetResponse())
		{
			using (StreamReader stream = new StreamReader(response.GetResponseStream()))
			{
				string json = stream.ReadToEnd();

				List<TestResult> results = JsonConvert.DeserializeObject<List<TestResult>>(json);;

				foreach (TestResult result in results)
				{
					Assert.IsTrue(result.ResultType == "Success", result.Description);
				}
				//Assert.IsFalse(html.Contains("Failure"));
				//Assert.IsFalse(html.Contains("Error"));
			}
		}

	}

	[TestMethod]
	[TestCategory("TEMPLATE_AllFail_Tests")]
	public void TEMPLATE_AllFail_Tests_TestAssertsTypesTest()
	{
		StringBuilder urlAspUnitTest = new StringBuilder(); 
		urlAspUnitTest.Append(BASE_URL);
		urlAspUnitTest.Append("&cboTestContainers=");
		urlAspUnitTest.Append("TEMPLATE_AllFail_Tests");            
		urlAspUnitTest.Append("&cboTestCases=");
		urlAspUnitTest.Append("TestAssertsTypes");
		urlAspUnitTest.Append("&chkShowSuccess=on");
		urlAspUnitTest.Append("&cmdRun=Run%20Tests");


		WebRequest request = WebRequest.Create(urlAspUnitTest.ToString());

		ICredentials requestCredentials = CredentialCache.DefaultCredentials;
		request.Credentials = requestCredentials;

		using (WebResponse response = request.GetResponse())
		{
			using (StreamReader stream = new StreamReader(response.GetResponseStream()))
			{
				string json = stream.ReadToEnd();

				List<TestResult> results = JsonConvert.DeserializeObject<List<TestResult>>(json);;

				foreach (TestResult result in results)
				{
					Assert.IsTrue(result.ResultType == "Success", result.Description);
				}
				//Assert.IsFalse(html.Contains("Failure"));
				//Assert.IsFalse(html.Contains("Error"));
			}
		}

	}

	[TestMethod]
	[TestCategory("TEMPLATE_AllFail_Tests")]
	public void TEMPLATE_AllFail_Tests_TestErrorTest()
	{
		StringBuilder urlAspUnitTest = new StringBuilder(); 
		urlAspUnitTest.Append(BASE_URL);
		urlAspUnitTest.Append("&cboTestContainers=");
		urlAspUnitTest.Append("TEMPLATE_AllFail_Tests");            
		urlAspUnitTest.Append("&cboTestCases=");
		urlAspUnitTest.Append("TestError");
		urlAspUnitTest.Append("&chkShowSuccess=on");
		urlAspUnitTest.Append("&cmdRun=Run%20Tests");


		WebRequest request = WebRequest.Create(urlAspUnitTest.ToString());

		ICredentials requestCredentials = CredentialCache.DefaultCredentials;
		request.Credentials = requestCredentials;

		using (WebResponse response = request.GetResponse())
		{
			using (StreamReader stream = new StreamReader(response.GetResponseStream()))
			{
				string json = stream.ReadToEnd();

				List<TestResult> results = JsonConvert.DeserializeObject<List<TestResult>>(json);;

				foreach (TestResult result in results)
				{
					Assert.IsTrue(result.ResultType == "Success", result.Description);
				}
				//Assert.IsFalse(html.Contains("Failure"));
				//Assert.IsFalse(html.Contains("Error"));
			}
		}

	}

	[TestMethod]
	[TestCategory("TEMPLATE_AllOK_Tests")]
	public void TEMPLATE_AllOK_Tests_TestTrueTest()
	{
		StringBuilder urlAspUnitTest = new StringBuilder(); 
		urlAspUnitTest.Append(BASE_URL);
		urlAspUnitTest.Append("&cboTestContainers=");
		urlAspUnitTest.Append("TEMPLATE_AllOK_Tests");            
		urlAspUnitTest.Append("&cboTestCases=");
		urlAspUnitTest.Append("TestTrue");
		urlAspUnitTest.Append("&chkShowSuccess=on");
		urlAspUnitTest.Append("&cmdRun=Run%20Tests");


		WebRequest request = WebRequest.Create(urlAspUnitTest.ToString());

		ICredentials requestCredentials = CredentialCache.DefaultCredentials;
		request.Credentials = requestCredentials;

		using (WebResponse response = request.GetResponse())
		{
			using (StreamReader stream = new StreamReader(response.GetResponseStream()))
			{
				string json = stream.ReadToEnd();

				List<TestResult> results = JsonConvert.DeserializeObject<List<TestResult>>(json);;

				foreach (TestResult result in results)
				{
					Assert.IsTrue(result.ResultType == "Success", result.Description);
				}
				//Assert.IsFalse(html.Contains("Failure"));
				//Assert.IsFalse(html.Contains("Error"));
			}
		}

	}

		}
	}
	


